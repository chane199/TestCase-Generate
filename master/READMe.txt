This directory contains the JTExpert distribution version 1.2.
It is Copyright (C) 2013-2014
The &Eacute;cole Polytechnique de Montr&eacute;al, except where otherwise noted.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                                                                                                 !!
!!   Very Important: JTExpert  is unsafe, you should not use it on  a software dealing with files  !!
!!   (e.g., files system implementation) or you suspect that a random instantiation of its classes !!
!!   may lead to an undesirable behavior                                                           !!
!!                                                                                                 !! 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
To execute JTExpert in a safe mode, we highly recommend that you use a user with very restrictive access, 
e.g., that can only read classes under test and dependencies, execute JTExpert, and write test data 
in a specific directory.
CONTENTS
        benchmarks      A suite of Java files used for benchmarking 
                        JTExpert implementation.
        lib             Contains all libraries used by JTExpert.
INSTALLATION 
Step 1. Download and unzip the JTExpert package.
The jar file is installed in the JTExpert main directory.
Step 2. Try it out!
I) Test-data generation for all-branches coverage
	If we suppose that the JTExpert's home directory is in your PATH and called JTE_HOME, the test suite can be generated by:
       $ java -jar -Xms1G -Xmx1G JTE_HOME/JTExpert-1.2.jar -cp JTE_HOME/benchmarks/commons/cp/commons-lang3-3.1.jar -jf JTE_HOME/benchmarks/commons/org/apache/commons/lang3/ArrayUtils.java -maxTime 60 -tp JTE_HOME/output/commons/60/82895723457381  -seed 82895723457381 -p -s -o -E 
	Options:
		-cp: to set the class path
		-jf: to set the Java file under test
		-maxTime: to set the time limit
		-tp: to set the work directory, wherein the test suite will be saved.
		-p: to print a progress bar
		-s: to show messages and errors thrown by the class under test
		-o: to override an existing test data file 
		-E: to activate the Exception-Otriented Test-Data Generation search (this option may reduce the coverage)
II) Unhandled-Exceptions Generation
The following steps are required if the user is interesting in Unhandled Exceptions. 
To get a bugs reports make sure that you use the option -E during the test-data generation.
	1) Compile the generated class.
		JTExpert saves the test-data set in the work directory under a sub-directory called testcases. 
		Note that the output class is created in the same package as the class under test. 
		For example to compile the test-data set that is generated in the previous step for ArrayUtils.java use the following command:
		$ javac -cp JTE_HOME/benchmarks/commons/cp/commons-lang3-3.1.jar:JTE_HOME/JTExpert-1.1.jar JTE_HOME/output/commons/60/82895723457381/testcase/org/apache/commons/lang3/ArrayUtilsJTETestCases.java
		(OPTIONAL) JTExpert keeps a disk copy of the last test candidate.  If a JVM crash is happen during the test-data generation, then the last test candidate may reproduce it.  
		$ javac -cp JTE_HOME/benchmarks/commons/cp/commons-lang3-3.1.jar:JTE_HOME/JTExpert-1.1.jar JTE_HOME/output/commons/60/82895723457381/testcase/org/apache/commons/lang3/ArrayUtilsLastTestCandidate.java
	2) Generate a JUnit Repport (not that this steps requires the libraries Junit, hamcrest-core, and system-rules). The junit output must be saved in a file for analysis in the next step. 
		for the example use this command
		$ java -cp junit.jar:hamcrest-core.jar:system-rules.jar:JTE_HOME/JTExpert-1.1.jar  JTE_HOME/output/commons/60/82895723457381/testcase/org/apache/commons/lang3/ArrayUtilsJTETestCases.class >> JTE_HOME/output/commons/60/82895723457381/org.apache.commons.lang3.ArrayUtilsJunitReport.txt
		This is useful in case of a JVM crash.
		$ java -cp junit.jar:hamcrest-core.jar:system-rules.jar:JTE_HOME/JTExpert-1.1.jar  JTE_HOME/output/commons/60/82895723457381/testcase/org/apache/commons/lang3/ArrayUtilsLastTestCandidate.class 
	3) Analyze exceptions and filter them to get a list of Unhandled Exceptions
		for the example use this command
		$ java -Xms1G -Xmx1G -cp JTExpert-1.1.jar csbst.analysis.LogsAnalyser -log JTE_HOME/output/commons/60/82895723457381/org.apache.commons.lang3.ArrayUtilsJunitReport.txt -src JTE_HOME/benchmarks/commons
		Options
			-log: use this option to set the log file to be analyzed (junit output)
			-src: use this option to set the root directory of the source-code. The log analyzer uses this directory to check if an exception is indeed unhandled. 
For more information about the JTExpert project, see the JTExpert WWW page at
<https://sites.google.com/site/saktiabdel/JTExpert>.
or contact us by e-mail.
Please submit bug reports to the e-mail address abdelilah.sakti@polymtl.ca
Thanks,
Abdelilah SAKTI
abdelilah.sakti@polymtl.ca
Department of Computer Science and Software Engineering
&Eacute;cole Polytechnique de Montr&eacute;al, Canada
JTExpert:	https://sites.google.com/site/saktiabdel/JTExpert
